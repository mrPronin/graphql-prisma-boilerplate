type Query {
    me: User!
    loggedInMessage: String!
}

type Mutation {
    createUser(data: CreateUserInput!): AuthPayload!
    login(data: LoginUserInput!): AuthPayload!
    deleteUser: User!
    updateUser(data: UpdateUserInput!): User!
    continueWithGoogle(data: AuthInput!): AuthPayload!
    continueWithFacebook(data: AuthInput!): AuthPayload!
}

# type Subscription {
    
# }

# Input types

input AuthInput {
    accessToken: String!
    refreshToken: String!
}

input CreateUserInput {
    name: String
    email: String!
    password: String!
    lastName: String
    picture: String
}

input LoginUserInput {
    email: String!
    password: String!
}

input UpdateUserInput {
    name: String
    email: String
    password: String
    lastName: String
    picture: String
}

# Types

type AuthPayload {
    token: String!
    user: User!
}

type User {
    id: ID!
    name: String
    email: String
    lastName: String
    picture: String
    authProviders: [AuthProvider!]
    signupType: AuthProviderType!
    updatedAt: String!
    createdAt: String!
}

type AuthProvider {
  id: ID!
  type: AuthProviderType!
  userId: String!
  user: User!
}

enum MutationType {
    CREATED
    UPDATED
    DELETED
}

enum AuthProviderType {
    GOOGLE
    FACEBOOK
    EMAIL
    UNDEFINED
}